# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("8ef93a7afa0a83cf6c491115736099641eee672a")
# Choose your state for analysis - assign it to a variable called my_state
state="VA"
count=census_ric%>%
group_by(Reliability_MHI)%>%
summarise(count=n())
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("8ef93a7afa0a83cf6c491115736099641eee672a")
# Choose your state for analysis - assign it to a variable called my_state
state="VA"
# Write your get_acs() code here
data=c(MHI="B19013_001",Population="B01003_001")
census_ric=get_acs(
geography = "county",
state= state,
variables = data,
year = 2023,
survey = "acs5",
output="wide",
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
census_ric=census_ric %>%
mutate(NAME=str_remove(NAME,"city, Virginia"))
census_ric=census_ric %>%
mutate(NAME=str_remove(NAME,"County, Virginia"))
# Display the first few rows
head(census_ric)
# Display the first few rows
head(census_ric)
## 2.2 Data Quality Assessment
**Your Task:** Calculate margin of error percentages and create reliability categories.
**Requirements:**
**Hint:** Use `mutate()` with `case_when()` for the categories.
```{r income-reliability}
# Calculate MOE percentage and reliability categories using mutate()
census_ric=census_ric%>%
mutate(MHIM_per=MHIM/MHIE*100,
PopM_per=PopulationM/PopulationE*100,
Reliability_MHI=case_when(
MHIM_per<5~"High Confidence",
MHIM_per>5&MHIM_per<10~"Moderate Confidence",
TRUE~"Low Confidence"
))
count=census_ric%>%
group_by(Reliability_MHI)%>%
summarise(count=n())
# Create table of top 5 counties by MOE percentage
arranged_census=arrange(census_ric,desc(MHIM_per))
sliced_census=slice(arranged_census,1:5)
final_census=sliced_census%>%
select(NAME,MHIE,MHIM,MHIM_per,Reliability_MHI)
# Format as table with kable() - include appropriate column names and caption
kable(final_census,col.names = c("County","MHI","MOE","MOE%","Reliability"))
View(sliced_census)
View(census_ric)
View(census_ric)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
selected_counties=c("660","830","171")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("8ef93a7afa0a83cf6c491115736099641eee672a")
# Choose your state for analysis - assign it to a variable called my_state
state="VA"
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter("Harrisonburg","Shenandoah","Williamsburg")
# Write your get_acs() code here
data=c(MHI="B19013_001",Population="B01003_001")
census_ric=get_acs(
geography = "county",
state= state,
variables = data,
year = 2023,
survey = "acs5",
output="wide",
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
census_ric=census_ric %>%
mutate(NAME=str_remove(NAME,"city, Virginia"))
census_ric=census_ric %>%
mutate(NAME=str_remove(NAME,"County, Virginia"))
# Display the first few rows
head(census_ric)
# Calculate MOE percentage and reliability categories using mutate()
census_ric=census_ric%>%
mutate(MHIM_per=MHIM/MHIE*100,
PopM_per=PopulationM/PopulationE*100,
Reliability_MHI=case_when(
MHIM_per<5~"High Confidence",
MHIM_per>5&MHIM_per<10~"Moderate Confidence",
TRUE~"Low Confidence"
))
count=census_ric%>%
group_by(Reliability_MHI)%>%
summarise(count=n())
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
# Create table of top 5 counties by MOE percentage
arranged_census=arrange(census_ric,desc(MHIM_per))
sliced_census=slice(arranged_census,1:5)
final_census=sliced_census%>%
select(NAME,MHIE,MHIM,MHIM_per,Reliability_MHI)
# Format as table with kable() - include appropriate column names and caption
kable(final_census,col.names = c("County","MHI","MOE","MOE%","Reliability"))
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter("Harrisonburg","Shenandoah","Williamsburg")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(NAME="Harrisonburg","Shenandoah","Williamsburg")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(NAME=="Harrisonburg"|"Shenandoah"|"Williamsburg")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(NAME=="Harrisonburg","Shenandoah","Williamsburg")
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(NAME=="Harrisonburg"|NAME=="Shenandoah"|NAME=="Williamsburg")
View(select_counties_2)
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(GEOID=="51660"|NAME=="Shenandoah"|NAME=="Williamsburg")
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(GEOID=="51660"|GEOID=="51171"|GEOID=="51830")
# Display the selected counties with their key characteristics
# Show: county name, median income, MOE percentage, reliability category
select_counties_2
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(GEOID=="51660"|GEOID=="51171"|GEOID=="51830")%>%
select("NAME","MHIE","MHIM_per","Reliability_MHI")
select_counties_2
# Define your race/ethnicity variables with descriptive names
race=c("White"=B03002_003,"Black"=B03002_004,"Hispanic"="B03002_012","Population"=B03002_001)
# Define your race/ethnicity variables with descriptive names
race=c("White"="B03002_003","Black"="B03002_004","Hispanic"="B03002_012","Population"="B03002_001")
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
data = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Define your race/ethnicity variables with descriptive names
race=c(White="B03002_003",Black="B03002_004",Hispanic="B03002_012",Population="B03002_001")
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
data = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
virables = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
viriables = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
variables = race,
year = 2023,
survey = "acs5",
output="wide",
)
county=c("660","171","830")
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
county = county,
variables = race,
year = 2023,
survey = "acs5",
output="wide",
)
View(tract_va)
# Calculate percentage of each group using mutate()
tract_va=tract_va%>%
mutate(WhiteM_per=WhiteM/WhiteE,
BlackM_per=BlackM/BlackE,
HispanicM_per=HispanicM/HispanicE,
PopulationM_per=PopulationM/PopulationE,
)
# Calculate percentage of each group using mutate()
tract_va=tract_va%>%
mutate(WhiteM_per=WhiteM/WhiteE,
BlackM_per=BlackM/BlackE,
HispanicM_per=HispanicM/HispanicE,
PopulationM_per=PopulationM/PopulationE
)
View(tract_va)
