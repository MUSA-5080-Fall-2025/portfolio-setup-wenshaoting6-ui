# Load required packages
library(tidyverse)
# Load required packages
library(tidyverse)
library(tidycensus)
library(scales)
library(RColorBrewer)
# Set your Census API key if you haven't already
census_api_key(Sys.getenv("CENSUS_API_KEY"))
# We'll use Pennsylvania data for consistency with previous weeks
state_choice <- "PA"
# Load all available variables for ACS 5-year 2022
acs_vars_2022 <- load_variables(2022, "acs5", cache = TRUE)
# Look at the structure
glimpse(acs_vars_2022)
head(acs_vars_2022)
# Search for population-related variables
population_vars <- acs_vars_2022 %>%
filter(str_detect(label, "Total.*population"))
# Look at the results
head(population_vars, 10)
# Or search in the concept field
pop_concept <- acs_vars_2022 %>%
filter(str_detect(concept, "Total Population"))
head(pop_concept)
# Search for median income
income_vars <- acs_vars_2022 %>%
filter(str_detect(label, "[Mm]edian.*income"))
# Look specifically for household income
household_income <- income_vars %>%
filter(str_detect(label, "household"))
print("Household income variables:")
head(household_income)
# Alternative: search by concept
income_concept <- acs_vars_2022 %>%
filter(str_detect(concept, "Median Household Income"))
View(income_vars)
# Search for multiple terms at once
housing_vars <- acs_vars_2022 %>%
filter(str_detect(label, "[Mm]edian.*(rent|value)"))
print("Housing cost variables:")
head(housing_vars, 10)
# Search excluding certain terms
income_not_family <- acs_vars_2022 %>%
filter(str_detect(label, "[Mm]edian.*income") &
!str_detect(label, "family"))
print("Income variables (not family income):")
head(income_not_family)
age_var=acs_vars_2022 %>%
filter(str_detect(label, "[Mm]edian.*age"))
head(age_var)
# Test the variables you found
test_vars <- c(
total_pop = "B01003_001",      # Total population
median_income = "B19013_001",  # Median household income
median_age = "B01002_001"      # Median age
)
# Get data for just one state to test
test_data <- get_acs(
geography = "state",
variables = test_vars,
state = "PA",
year = 2022
)
# Check that you got what you expected
test_data
View(acs_vars_2022)
# Get county-level data for your state
county_data <- get_acs(
geography = "county",
variables = c(
total_pop = "B01003_001",       # Total population
median_income = "B19013_001",   # Median household income
median_age = "B01002_001"       # Median age
),
state = state_choice,
year = 2022,
output = "wide"
)
# Clean county names
county_data <- county_data %>%
mutate(county_name = str_remove(NAME, paste0(", ", state_choice)))
# Basic inspection
glimpse(county_data)
# Create histogram of median income
ggplot(county_data) +
aes(x = median_incomeE) +
geom_histogram(bins = 15, fill = "steelblue", alpha = 0.7) +
labs(
title = "Distribution of Median Household Income",
x = "Median Household Income ($)",
y = "Number of Counties"
) +
theme_minimal() +
scale_x_continuous(labels = dollar)
# Box plot to see outliers clearly
ggplot(county_data) +
aes(y = median_incomeE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Median Income Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
# Identify the outlier counties
income_outliers <- county_data %>%
mutate(
Q1 = quantile(median_incomeE, 0.25, na.rm = TRUE),
Q3 = quantile(median_incomeE, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
outlier = median_incomeE < (Q1 - 1.5 * IQR) | median_incomeE > (Q3 + 1.5 * IQR)
) %>%
filter(outlier) %>%
select(county_name, median_incomeE)
print("Outlier counties:")
income_outliers
View(county_data)
ggplot(county_data) +
aes(y = total_popE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Total Pop Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = count)
ggplot(county_data) +
aes(y = total_popE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Total Pop Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = double)
ggplot(county_data) +
aes(y = total_popE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Total Pop Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
ggplot(county_data) +
aes(y = total_popE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Total Pop Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal()
# Identify the outlier counties
income_outliers <- county_data %>%
mutate(
Q1 = quantile(total_popE, 0.25, na.rm = TRUE),
Q3 = quantile(total_popE, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
outlier = total_popE < (Q1 - 1.5 * IQR) | total_popE > (Q3 + 1.5 * IQR)
) %>%
filter(outlier) %>%
select(county_name, total_popE)
print("Outlier counties:")
income_outliers
# Enhanced scatter plot with trend line
ggplot(county_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Population vs Median Income in Pennsylvania Counties",
subtitle = "2018-2022 ACS 5-Year Estimates",
x = "Total Population",
y = "Median Household Income ($)",
caption = "Source: U.S. Census Bureau"
) +
theme_minimal() +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar)
# Basic scatter plot
ggplot(county_data) +
aes(x = total_popE, y = median_incomeE) +
geom_point() +
labs(
title = "Population vs Median Income",
x = "Total Population",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_x_continuous(labels = comma) +
scale_y_continuous(labels = dollar)
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "ln", se = TRUE) +
labs(
title = "Log(Population) vs Median Income",
x = "Log(Total Population)",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "log", se = TRUE) +
labs(
title = "Log(Population) vs Median Income",
x = "Log(Total Population)",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "glm", se = TRUE) +
labs(
title = "Log(Population) vs Median Income",
x = "Log(Total Population)",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "loess", se = TRUE)
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "gam", se = TRUE)
# Log-transformed scatter plot
ggplot(county_data) +
aes(x = log(total_popE), y = median_incomeE) +
geom_point(alpha = 0.7) +
geom_smooth(method = "lm", se = TRUE)
colnames(county_data)
ggplot(county_data) +
aes(y = total_popE) +
geom_boxplot(fill = "lightblue", width = 0.5) +
labs(
title = "Total Pop Distribution with Outliers",
y = "Median Household Income ($)"
) +
theme_minimal()
ggplot(county_data)+
aes(x=total_popE)+
geom_histogram(color="red")+labs(
title = "Total Pop Distribution with Outliers",
y = "Number of people"
) +
theme_minimal()
ggplot(county_data)+
aes(x=total_popE)+
geom_histogram(fill="red")+labs(
title = "Total Pop Distribution with Outliers",
y = "Number of people"
) +
theme_minimal()
income_outliers <- county_data %>%
mutate(
Q1 = quantile(total_popE, 0.25, na.rm = TRUE),
Q3 = quantile(total_popE, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
outlier = total_popE < (Q1 - 1.5 * IQR) | total_popE > (Q3 + 1.5 * IQR)
) %>%
filter(outlier) %>%
select(county_name, total_popE)
print("Outlier counties:")
income_outliers
pop_outliers <- county_data %>%
mutate(
Q1 = quantile(total_popE, 0.25, na.rm = TRUE),
Q3 = quantile(total_popE, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
outlier = total_popE < (Q1 - 1.5 * IQR) | total_popE > (Q3 + 1.5 * IQR)
) %>%
filter(outlier) %>%
select(county_name, total_popE)
print("Outlier counties:")
pop_outliers <- county_data %>%
mutate(
Q1 = quantile(total_popE, 0.25, na.rm = TRUE),
Q3 = quantile(total_popE, 0.75, na.rm = TRUE),
IQR = Q3 - Q1,
outlier = total_popE < (Q1 - 1.5 * IQR) | total_popE > (Q3 + 1.5 * IQR)
) %>%
filter(outlier) %>%
select(county_name, total_popE)
pop_out=county_data%>% arrange(desc(total_popE))
pop_out_desc=county_data%>% arrange(desc(total_popE))
pop_out_as=county_data%>% arrange(total_popE)
print(pop_out)
print(pop_out[,3])
print(pop_out[3,])
print(pop_out[3:])
print(pop_out,3)
print(pop_out_desc,3)
print(pop_out_as,3)
ggplot(county_data)+
aes(x=median_ageE,y=median_incomeE)+
geom_point(color="red",alpha=0.5)+
geom_smooth(method = "loess")+
theme_dark+
labs(
title = "Log(Population) vs Median Income",
x = "Log(Total Population)",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
ggplot(county_data)+
aes(x=median_ageE,y=median_incomeE)+
geom_point(color="red",alpha=0.5)+
geom_smooth(method = "loess")+
theme_dark()+
labs(
title = "Log(Population) vs Median Income",
x = "Log(Total Population)",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
ggplot(county_data)+
aes(x=median_ageE,y=median_incomeE)+
geom_point(color="red",alpha=0.5)+
geom_smooth(method = "loess")+
theme_dark()+
labs(
title = "Median Age vs Median Income",
x = "Median Age",
y = "Median Household Income ($)"
) +
theme_minimal() +
scale_y_continuous(labels = dollar)
ggplot(county_data)+
aes(x=median_ageE,y=median_incomeE)+
geom_point(color="red",alpha=0.5)+
geom_smooth(method = "loess")+
theme_dark()+
labs(
title = "Median Age vs Median Income",
x = "Median Age",
y = "Median Household Income ($)"
) +
scale_y_continuous(labels = dollar)
county_data=county_data %>% mutate(
agemoe=median_ageM / median_ageE * 100
)
ggplot(county_data)+
aes(x=total_popE,y=agemoe)+
geom_point(color="purple",size=2)+
geom_hline(yintercept = 0.05+color = "blue", linetype = "dashed")
ggplot(county_data)+
aes(x=total_popE,y=agemoe)+
geom_point(color="purple",size=2)+
geom_hline(yintercept = 0.05,color = "blue", linetype = "dashed")
county_reliability <- county_data %>%
mutate(
income_moe_pct = (median_ageM / median_ageE) * 100,
pop_category = case_when(
total_popE < 50000 ~ "Small (<50K)",
total_popE < 200000 ~ "Medium (50K-200K)",
TRUE ~ "Large (200K+)"
)
)
ggplot(county_reliability) +
aes(x = pop_category, y = income_moe_pct, fill = pop_category) +
geom_boxplot() +
labs(
title = "Data Reliability by County Size Category",
x = "Population Category",
y = "Margin of Error (%)"
) +
theme_minimal() +
theme(legend.position = "none")
print(g)
g=ggplot(county_data)+
aes(x=total_popE,y=agemoe)+
geom_point(color="purple",size=2)+
geom_hline(yintercept = 0.05,color = "blue", linetype = "dashed")
print(g)
print(county_data$agemoe)
ggplot(county_reliability) +
aes(x = pop_category, y = income_moe_pct, fill = pop_category) +
geom_boxplot() +
labs(
title = "Data Reliability by County Size Category",
x = "Population Category",
y = "Margin of Error (%)"
) +
theme_minimal() +
theme(legend.position = "none")
county_data <- county_data %>%
mutate(
income_moe_pct = (median_ageM / median_ageE) * 100,
pop_category = case_when(
total_popE < 50000 ~ "Small (<50K)",
total_popE < 200000 ~ "Medium (50K-200K)",
TRUE ~ "Large (200K+)"
))
colnames(county_data)
library(RColorBrewer)
county_data <- county_data %>%
mutate(
income_moe_pct = (median_ageM / median_ageE) * 100,
pop_category = case_when(
median_incomeE < 50000 ~ "Small (<50K)",
median_incomeE < 80000 ~ "Medium (50K-200K)",
TRUE ~ "Large (200K+)"
))
ggplot(county_data)+
aes(x=population,y=median_ageE,color=median_incomeE)+
geom_point(size=county_data$income_moe_pct)+
scale_color_brewer(palette="Set2")+
facet_wrap(~pop_category)+
theme_bw()
colnames(county_data)
ggplot(county_data)+
aes(x=total_popE,y=median_ageE,color=median_incomeE)+
geom_point(size=county_data$income_moe_pct)+
scale_color_brewer(palette="Set2")+
facet_wrap(~pop_category)+
theme_bw()
ggplot(county_data)+
aes(x=total_popE,y=median_ageE,color=median_incomeE)+
geom_point()+
scale_color_brewer(palette="Set2")+
facet_wrap(~pop_category)+
theme_bw()
rlang::last_trace()
ggplot(county_data)+
aes(x=total_popE,y=median_ageE,color=pop_category)+
geom_point(size=county_data$income_moe_pct)+
scale_color_brewer(palette="Set2")+
facet_wrap(~pop_category)+
theme_bw()
