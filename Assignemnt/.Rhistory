# Load required packages
library(sf)
library(tidyverse)
library(tigris)
library(tidycensus)
library(scales)
library(patchwork)
library(here)
library(knitr)
# Load spatial data
pa_counties <- st_read(here("C:/Users/wensh/Desktop/MUSA5080/week-04/data/Pennsylvania_County_Boundaries.shp"))
hospitals <- st_read(here("C:/Users/wensh/Desktop/MUSA5080/week-04/data/hospitals.geojson"))
census_tracts <- tracts(state = "PA", cb = TRUE)
# Check that all data loaded correctly
head(pa_counties)
head(hospitals)
head(census_tracts)
# Get demographic data from ACS
df=load_variables(2023,"acs5")
# Get demographic data from ACS
df=load_variables(2023,"acs5/profile")
View(df)
# Get demographic data from ACS
df=load_variables(2023,"acs5/profile")
data=c(population="DP02_0018",age="DP05_0024",income="DP03_0062")
df = get_acs(state = "PA",
variables = data,
survey = "acs5",
geometry = TRUE,
geography = "tract",
output = "wide",
year = 2023)
# Join to tract boundaries
#I already downloaded my geography when using tidycensus
sum(is.na(df$incomeE))
median(df$incomeE,na.rm = TRUE)
summary(df)
# Filter for vulnerable tracts based on your criteria
summary(df)
vulnerable=df%>%
filter(ageE>945|incomeE<32150)
print(vulnerable)
973/3446
974/3446
# Transform to appropriate projected CRS
vulnerable_proj=vulnerable%>%
st_transform(3365)
host_proj=hospitals%>%
st_transform(3365)
# Calculate distance from each tract centroid to nearest hospital
vulnerable_center=st_centroid(vulnerable_proj)
dist <- vulnerable_center %>%
mutate(
dis_to_tract = apply(
st_distance(st_centroid(vulnerable_center), host_proj),
1,
min
) *0.000189
)
mean(dist$dis_to_tract)
max(dist$dis_to_tract)
dist$indi=ifelse(dist$dis_to_tract>15,1,0)
summary(dist$indi==1)
# Create underserved variable
underserved=dist%>%
filter(indi==1)
33/973
17/973
# Spatial join tracts to counties
df = get_acs(state = "PA",
variables = data,
survey = "acs5",
geometry = TRUE,
geography = "county",
output = "wide")
# Aggregate statistics by county
dist_final=dist%>%
st_drop_geometry()%>%
mutate(NAME=str_remove(NAME,"; Pennsylvania"))
dist_final[,11:12] = str_split_fixed(dist_final$NAME,";",2)
df_removed=df%>%
mutate(NAME=str_remove(NAME,", Pennsylvania"))%>%
mutate(NAME = str_trim(str_to_title(NAME)))
dist_final2=dist_final%>%
mutate(NAME=V12)%>%
mutate(NAME = str_trim(str_to_title(NAME)))%>%
group_by(NAME)%>%
summarise(
vulnerable=n(),
underserved=sum(indi==1),
per=underserved/vulnerable,
avg_dis=mean(dis_to_tract),
vulner_pop=sum(populationE)
)
df_removed=df_removed%>%
left_join(dist_final2,by="NAME")
View(dist_final2)
library(scales)
# Create and format priority counties table
df_table=df_removed%>%
st_drop_geometry()%>%
mutate(percentage=round(per*100,digits = 3))%>%
mutate(pop=comma(populationE))%>%
mutate(distance=round(avg_dis,digits = 3))%>%
select(NAME,pop,vulnerable,underserved, percentage, distance, vulner_pop)
final_table=df_table[order(df_table$percentage,decreasing=TRUE),]
kable(final_table, col.names=c("County Name","Population","Number of Vulnerable Tracts","Underserved Tracts",
"Percentage of Underserved Tract","Average Distance to Nearest Hospital",
"Vulnerable Population"),format = "html",row.names = FALSE,
bootstrap_options=c("striped", "hover", "condensed"),
full_width = FALSE,
position = "center",caption = "County-level summary of population, vulnerable tracts, underserved tracts, and hospital accessibility in Pennsylvania.")
# Create county-level access map
df_removed$percentage=df_removed$per*100
ggplot(df_removed) +
geom_sf(aes(fill = percentage), color = "white")+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
option = "magma"
) +
scale_color_manual(
name="",
values = c("Hospital" = "red")
)+
labs(
title = "Vulnerable Tracts and Hospital Locations in Pennsylvania"
) +
theme_void()
# Create county-level access map
df_removed$percentage=df_removed$per*100
ggplot(df_removed) +
geom_sf(aes(fill = percentage), color = "white")+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
substitle="Data Source: ACS 5-Year Census Data"
option = "magma"
# Create county-level access map
df_removed$percentage=df_removed$per*100
ggplot(df_removed) +
geom_sf(aes(fill = percentage), color = "white")+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
substitle="Data Source: ACS 5-Year Census Data",
option = "magma"
) +
scale_color_manual(
name="",
values = c("Hospital" = "red")
)+
labs(
title = "Vulnerable Tracts and Hospital Locations in Pennsylvania"
) +
theme_void()
# Create county-level access map
df_removed$percentage=df_removed$per*100
ggplot(df_removed) +
geom_sf(aes(fill = percentage), color = "white")+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
subtitle="Data Source: ACS 5-Year Census Data",
option = "magma"
) +
scale_color_manual(
name="",
values = c("Hospital" = "red")
)+
labs(
title = "Vulnerable Tracts and Hospital Locations in Pennsylvania"
) +
theme_void()
# Create county-level access map
df_removed$percentage=df_removed$per*100
ggplot(df_removed) +
geom_sf(aes(fill = percentage), color = "white")+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
option = "magma"
) +
scale_color_manual(
name="",
values = c("Hospital" = "red")
)+
labs(
title = "Vulnerable Tracts and Hospital Locations in Pennsylvania",
subtitle="Data Source: ACS 5-Year Census Data"
) +
theme_void()
# Create detailed tract-level map
dist_final_map=dist_final%>%
group_by(GEOID)%>%
summarise(
vulnerable=n(),
underserved=sum(indi==1),
per=underserved/vulnerable,
avg_dis=mean(dis_to_tract),
vulner_pop=sum(populationE)
)
dist_final_map2=vulnerable_proj%>%
left_join(dist_final_map,by="GEOID")
ggplot() +
geom_sf(data = census_tracts, color="black")+
geom_sf(data=dist_final_map2,fill="red",aes(color="Vulnerable Tract"))+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
geom_sf(data = df_removed,fill= NA,aes(color = "County Boundary"),size=6, alpha= 1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
option = "magma"
) +
scale_color_manual(
name="",
values = c("Hospital" = "black","Vulnerable Tract"="black","County Boundary"="yellow")
)+
labs(
title = "Vulnerable Tracts and Hospital Locations in Pennsylvania",
subtitle = "County boundaries added as reference"
) +
theme_void()
# Create detailed tract-level map
dist_final_map=dist_final%>%
group_by(GEOID)%>%
summarise(
vulnerable=n(),
underserved=sum(indi==1),
per=underserved/vulnerable,
avg_dis=mean(dis_to_tract),
vulner_pop=sum(populationE)
)
dist_final_map2=vulnerable_proj%>%
left_join(dist_final_map,by="GEOID")
ggplot() +
geom_sf(data = census_tracts, color="black")+
geom_sf(data=dist_final_map2,fill="red",aes(color="Vulnerable Tract"))+
geom_sf(data = host_proj, aes(color = "Hospital"),size=1)+
geom_sf(data = df_removed,fill= NA,aes(color = "County Boundary"),size=6, alpha= 1)+
scale_fill_viridis_c(
name = "Percentage of vulnerable tracts",
option = "magma"
) +
scale_color_manual(
name="",
values = c("Hospital" = "black","Vulnerable Tract"="black","County Boundary"="yellow")
)+
labs(
title = "Vulnerable Tracts and Hospital Locations in Pennsylvania",
subtitle = "Data Source: ACS 5-Year Census Data"
) +
theme_void()
# Create distribution visualization
ggplot(dist_final, aes(x = dis_to_tract)) +
geom_histogram(binwidth = 1, color = "black", fill = "skyblue") +
labs(
title = "Distribution of Distances to Hospitals for Vulnerable Tracts",
x = "Distance (Km)",
y = "Number of Tracts",
subtitle = "The distribution is left-skewed, with most tracts located relatively close to the nearest hospital."
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
View(dist_final)
# Create distribution visualization
ggplot(dist_final, aes(x = populationE)) +
geom_histogram(binwidth = 1, color = "black", fill = "skyblue") +
labs(
title = "Distribution of Distances to Hospitals for Vulnerable Tracts",
x = "Distance (Km)",
y = "Number of Tracts",
subtitle = "The distribution is left-skewed, with most tracts located relatively close to the nearest hospital."
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create distribution visualization
ggplot(dist_final, aes(x = dis_to_tract)) +
geom_histogram(binwidth = 1, color = "black", fill = "skyblue") +
labs(
title = "Distribution of Distances to Hospitals for Vulnerable Tracts",
x = "Distance (Km)",
y = "Number of Tracts",
subtitle = "The distribution is left-skewed, with most tracts located relatively close to the nearest hospital."
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create distribution visualization
ggplot(dist_final, aes(x = dis_to_tract,weight=populationE)) +
geom_histogram(binwidth = 1, color = "black", fill = "skyblue") +
labs(
title = "Distribution of Distances to Hospitals for Vulnerable Tracts",
x = "Distance (Km)",
y = "Number of Tracts",
subtitle = "The distribution is left-skewed, with most tracts located relatively close to the nearest hospital."
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create distribution visualization
ggplot(dist_final, aes(x = dis_to_tract,weight=populationE)) +
geom_histogram(binwidth = 1, color = "black", fill = "skyblue") +
scale_y_continuous(labels = comma) +
labs(
title = "Distribution of Distances to Hospitals for Population",
x = "Distance (Km)",
y = "Population",
subtitle = "The distribution is left-skewed, with most people located relatively close to the nearest hospital."
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Create distribution visualization
ggplot(dist_final, aes(x = dis_to_tract,weight=populationE)) +
geom_histogram(binwidth = 1, color = "black", fill = "skyblue") +
scale_y_continuous(labels = comma) +
labs(
title = "Distribution of Distances to Hospitals for Population",
x = "Distance (Miles)",
y = "Population",
subtitle = "The distribution is left-skewed, with most people located relatively close to the nearest hospital."
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
axis.title = element_text(size = 12)
)
# Load your additional dataset
library(httr)
library(jsonlite)
tree=st_read("C:/Users/wensh/Desktop/MUSA5080/week-04/data/ppr_tree_inventory_2024/ppr_tree_inventory_2024.shp")
parkl=st_read("C:/Users/wensh/Desktop/MUSA5080/week-04/data/PPR_Program_Sites.geojson")
park_proj=parkl%>%st_transform(3365)
tree_proj=tree%>%st_transform(3365)
summary(park_proj)
summary(tree_proj)
# Your spatial analysis
#get philly census data
philly=get_acs(
geography = "tract",
state = "PA",
county = "101",
year = 2023,
survey = "acs5",
variables =c(population="DP02_0018",age="DP05_0023",income="DP03_0062"),
geometry = TRUE,
output="wide"
)
#reproject census data
philly_project=philly%>%
st_transform(3365)
#spatial join census data with tree counts
philly_tree = philly_project%>%
mutate(tree_count = lengths(st_contains(., tree_proj)))
#calculate the distance between tract and parks
tract_center=st_centroid(philly_project)
dist_park <- tract_center %>%
mutate(
dis_to_tract = apply(
st_distance(tract_center, park_proj),
1,
min
) *0.000189
)
#merge tree counts and distance to park
dist_final_philly = dist_park%>%
st_drop_geometry()%>%
select(GEOID,dis_to_tract)
final_philly = philly_tree%>%
left_join(dist_final_philly,by="GEOID")
#calculate tree per area in census tract
final_philly = final_philly%>%
mutate(area=st_area(geometry))%>%
mutate(tree_per=as.numeric(tree_count/area))
#normalize both distance to park and tree per area
normalize_to_0_1 <- function(vec) {
min_val <- min(vec, na.rm = TRUE)
max_val <- max(vec, na.rm = TRUE)
normalized_vec <- (vec - min_val) / (max_val - min_val)
return(normalized_vec)
}
#calculate the final index (park 75% weight and tree 25% weight)
final_philly=final_philly%>%
mutate(normalize_tree=normalize_to_0_1(tree_per))%>%
mutate(normalize_park=normalize_to_0_1(dis_to_tract))%>%
mutate(index=0.75*normalize_park+0.25*normalize_tree)
#map the results
ggplot(final_philly) +
geom_sf(aes(fill = index), color = "white")+
scale_fill_viridis_c(
name = "Green Space Index",
option = "magma"
) +
labs(
title = "Green Space Index in Pennsylvania",
subtitle = "Calculated based on distance to park and tree by area"
) +
theme_void()
