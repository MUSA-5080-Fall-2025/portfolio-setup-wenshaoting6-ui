# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
**State Selection:** I have chosen **[Virginia]** for this analysis because: [Brief explanation of why you chose this state]
## 2.1 Data Retrieval
**Your Task:** Use `get_acs()` to retrieve county-level data for your chosen state.
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("8ef93a7afa0a83cf6c491115736099641eee672a")
# Choose your state for analysis - assign it to a variable called my_state
state="VA"
# Write your get_acs() code here
data=c(MHI="B19013_001",Population="B01003_001")
census_ric=get_acs(
geography = "county",
state= state,
variables = data,
year = 2023,
survey = "acs5",
output="wide",
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
census_ric=census_ric %>%
mutate(NAME=str_remove(NAME,"city, Virginia"))
census_ric=census_ric %>%
mutate(NAME=str_remove(NAME,"County, Virginia"))
# Display the first few rows
head(census_ric)
# Calculate MOE percentage and reliability categories using mutate()
census_ric=census_ric%>%
mutate(MHIM_per=MHIM/MHIE*100,
PopM_per=PopulationM/PopulationE*100,
Reliability_MHI=case_when(
MHIM_per<5~"High Confidence",
MHIM_per>5&MHIM_per<10~"Moderate Confidence",
TRUE~"Low Confidence"
))
count=census_ric%>%
group_by(Reliability_MHI)%>%
summarise(count=n())
# Create table of top 5 counties by MOE percentage
arranged_census=arrange(census_ric,desc(MHIM_per))
sliced_census=slice(arranged_census,1:5)
final_census=sliced_census%>%
select(NAME,MHIE,MHIM,MHIM_per,Reliability_MHI)
# Format as table with kable() - include appropriate column names and caption
kable(final_census,col.names = c("County","MHI","MOE","MOE%","Reliability"))
# Use filter() to select 2-3 counties from your county_reliability data
# Store the selected counties in a variable called selected_counties
select_counties_2 <- census_ric%>%
filter(GEOID=="51660"|GEOID=="51171"|GEOID=="51830")%>%
select("NAME","MHIE","MHIM_per","Reliability_MHI")
select_counties_2
# Define your race/ethnicity variables with descriptive names
race=c(White="B03002_003",Black="B03002_004",Hispanic="B03002_012",Population="B03002_001")
county=c("660","171","830")
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
county = county,
variables = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Calculate percentage of each group using mutate()
tract_va=tract_va%>%
mutate(White_per=WhiteE/PopulationE,
Black_per=BlackE/PopulationE,
Hispanic_per=HispanicE/PopulationE,
)
# Add readable tract and county name columns using str_extract() or similar
tract_va=tract_va%>%
mutate(NAME=str_remove(NAME,"; Virginia"))
tract_va[,14:15] <- str_split_fixed(tract_va$NAME,";",2)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
tract_va_top=tract_va%>%arrange(desc(
tract_va$Hispanic_per)
)
tract_va_top1=tract_va_top%>%slice(1)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
avg_demo=tract_va%>%group_by(V2)%>%
summarize(avg_whper=mean(White_per),avg_blper=mean(Black_per),avg_his_per=mean(Hispanic_per),count=n())
kable(avg_demo,col.names = c("County","Average White Percentage","Average Black Percentage","Average Hisanic Population","Count"))
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_va=tract_va%>%
mutate(WhiteM_moe=WhiteM/WhiteE*100,
BlackM_moe=BlackM/BlackE*100,
HispanicM_moe=HispanicM/HispanicE*100,
PopulationM_moe=PopulationM/PopulationE*100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_va=tract_va%>%
mutate(flag=ifelse(WhiteM_moe|BlackM_moe|HispanicM_moe|PopulationM_moe>15,"Flag","Not flag"))
# Create summary statistics showing how many tracts have data quality issues
summary=tract_va%>%group_by(flag)%>%
summarize(count=n())
print(summary)
View(tract_va)
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
census_api_key("8ef93a7afa0a83cf6c491115736099641eee672a")
# Choose your state for analysis - assign it to a variable called my_state
state="VA"
tract_va=tract_va%>%
mutate(avg_pop=sum(PopulationE)/25)
View(tract_va)
tract_va=tract_va%>%
mutate(avg_pop=sum(PopulationE)/25)%>%
summarise(white_avg=mean(White_per))%>%
summarise(black_avg=mean(Black_per))%>%
summarise(hispanic_avg=mean(Hispanic_per))
rlang::last_trace()
View(tract_va)
tract_va=tract_va%>%
mutate(avg_pop=sum(PopulationE)/25)%>%
summarise(white_avg=mean(White_per))%>%
summarise(black_avg=mean(tract_va$Black_per))%>%
summarise(hispanic_avg=mean(Hispanic_per))
tract_va=tract_va%>%
mutate(avg_pop=sum(PopulationE)/25)%>%
summarise(white_avg=mean(White_per))%>%
summarise(black_avg=mean(tract_va$Black_per))%>%
summarise(hispanic_avg=mean(tract_va$Hispanic_per))
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out=tract_va%>%
select(avg_pop,white_avg,black_avg,hispanic_avg)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out=tract_va%>%
select(tract_va$avg_pop,white_avg,black_avg,hispanic_avg)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out=tract_va%>%
select(tract_va$avg_pop,tract_va$white_avg,tract_va$black_avg,tract_va$hispanic_avg)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out=tract_va%>%
filter(tract_va$avg_pop,tract_va$white_avg,tract_va$black_avg,tract_va$hispanic_avg)
View(tract_va)
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
county = county,
variables = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Calculate percentage of each group using mutate()
tract_va=tract_va%>%
mutate(White_per=WhiteE/PopulationE,
Black_per=BlackE/PopulationE,
Hispanic_per=HispanicE/PopulationE,
)
# Add readable tract and county name columns using str_extract() or similar
tract_va=tract_va%>%
mutate(NAME=str_remove(NAME,"; Virginia"))
tract_va[,14:15] <- str_split_fixed(tract_va$NAME,";",2)
# Find the tract with the highest percentage of Hispanic/Latino residents
# Hint: use arrange() and slice() to get the top tract
tract_va_top=tract_va%>%arrange(desc(
tract_va$Hispanic_per)
)
tract_va_top1=tract_va_top%>%slice(1)
# Calculate average demographics by county using group_by() and summarize()
# Show: number of tracts, average percentage for each racial/ethnic group
avg_demo=tract_va%>%group_by(V2)%>%
summarize(avg_whper=mean(White_per),avg_blper=mean(Black_per),avg_his_per=mean(Hispanic_per),count=n())
kable(avg_demo,col.names = c("County","Average White Percentage","Average Black Percentage","Average Hisanic Population","Count"))
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_va=tract_va%>%
mutate(WhiteM_moe=WhiteM/WhiteE*100,
BlackM_moe=BlackM/BlackE*100,
HispanicM_moe=HispanicM/HispanicE*100,
PopulationM_moe=PopulationM/PopulationE*100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_va=tract_va%>%
mutate(flag=ifelse(WhiteM_moe|BlackM_moe|HispanicM_moe|PopulationM_moe>15,"Flag","Not flag"))
# Create summary statistics showing how many tracts have data quality issues
summary=tract_va%>%group_by(flag)%>%
summarize(count=n())
print(summary)
tract_va=tract_va%>%
mutate(avg_pop=sum(PopulationE)/25)%>%
summarise(white_avg=mean(White_per))%>%
summarise(black_avg=mean(tract_va$Black_per))%>%
summarise(hispanic_avg=mean(tract_va$Hispanic_per))
# Use get_acs() to retrieve tract-level data
tract_va=get_acs(
geography = "tract",
state = state,
county = county,
variables = race,
year = 2023,
survey = "acs5",
output="wide",
)
# Calculate percentage of each group using mutate()
tract_va=tract_va%>%
mutate(White_per=WhiteE/PopulationE,
Black_per=BlackE/PopulationE,
Hispanic_per=HispanicE/PopulationE,
)
# Add readable tract and county name columns using str_extract() or similar
tract_va=tract_va%>%
mutate(NAME=str_remove(NAME,"; Virginia"))
tract_va[,14:15] <- str_split_fixed(tract_va$NAME,";",2)
# Calculate MOE percentages for white, Black, and Hispanic variables
# Hint: use the same formula as before (margin/estimate * 100)
tract_va=tract_va%>%
mutate(WhiteM_moe=WhiteM/WhiteE*100,
BlackM_moe=BlackM/BlackE*100,
HispanicM_moe=HispanicM/HispanicE*100,
PopulationM_moe=PopulationM/PopulationE*100
)
# Create a flag for tracts with high MOE on any demographic variable
# Use logical operators (| for OR) in an ifelse() statement
tract_va=tract_va%>%
mutate(flag=ifelse(WhiteM_moe|BlackM_moe|HispanicM_moe|PopulationM_moe>15,"Flag","Not flag"))
# Create summary statistics showing how many tracts have data quality issues
summary=tract_va%>%group_by(flag)%>%
summarize(count=n())
print(summary)
tract_va_summary <- tract_va %>%
mutate(avg_pop = sum(PopulationE) / 25) %>%
summarise(
white_avg = mean(White_per),
black_avg = mean(Black_per),
hispanic_avg = mean(Hispanic_per)
)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out=tract_va%>%
filter(tract_va$avg_pop,tract_va$white_avg,tract_va$black_avg,tract_va$hispanic_avg)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out=tract_va%>%
select(tract_va$avg_pop,tract_va$white_avg,tract_va$black_avg,tract_va$hispanic_avg)
# Use group_by() and summarize() to create this comparison
# Create a professional table showing the patterns
tract_out <- tract_va %>%
select(avg_pop, white_avg, black_avg, hispanic_avg)
View(tract_va)
View(tract_va_summary)
tract_va_summary <- tract_va %>%
summarise(
avg_pop=mean(PopulationE)
white_avg = mean(White_per),
tract_va_summary <- tract_va %>%
summarise(
avg_pop = mean(PopulationE),
white_avg = mean(White_per),
black_avg = mean(Black_per),
hispanic_avg = mean(Hispanic_per)
)
kable(tract_va_summary,col.names = c("Average Population","Average White Percentage","Average Black Percentage","Average Hisanic Percentage"))
View(tract_va)
View(tract_va)
View(census_ric)
# Create a summary table using your county reliability data
# Include: county name, median income, MOE percentage, reliability category
county_sum=census_ric%>%select(
NAME,MHIE,MHIM_per,Reliability_MHI
)
View(county_sum)
county_sum=county_sum%>%
mutate(Suggestion=case_when(
Reliability_MHI == "High Confidence" ~ "Safe for algorithmic decisions",
Reliability_MHI == "Moderate Confidence" ~ "Use with caution - monitor outcomes",
TRUE ~ "Requires manual review or additional data"
))
View(county_sum)
# Format as a professional table with kable()
kable(county_sum,col.names = c("NAME","MHI","MHI MOE Percentage","Reliability","Suggestion"))
write.csv(county_sum,"C:/Users/wensh/Desktop/c.csv")
print(count)
